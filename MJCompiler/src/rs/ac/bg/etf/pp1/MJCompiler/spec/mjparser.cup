

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
	
	boolean errorDetected;
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	
    	errorDetected = true;
    	
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with{:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG;

terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;

terminal LPAREN; // (
terminal RPAREN; // )
terminal LBRACE; // {
terminal RBRACE; // }
terminal LBRACK; // [
terminal RBRACK; // ]
terminal DOT;	 // .
terminal COLON;  // :
terminal SEMI;	 // ;
terminal COMMA;  // ,
terminal EQUAL;	 // =
terminal ISEQ;	 // == 
terminal ISNEQ;	 // !=
terminal GRT;	 // >
terminal GRTE;	 // >=
terminal LSS;	 // <
terminal LSSE;	 // <=
terminal OR;	 // ||
terminal AND;	 // &&
terminal ARROW;	 // =>

terminal INCR;	 // ++
terminal DECR;	 // --
terminal PLUS;	 // +
terminal MINUS;	 // -
terminal MUL;	 // *
terminal DIV;	 // /
terminal MOD;	 // %

terminal CONST;
terminal VOID;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal BREAK;
terminal CONTINUE;
terminal RETURN;

terminal READ;
terminal PRINT;

terminal NEW;
terminal FOREACH;

terminal CLASS;
terminal EXTENDS;




nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;
nonterminal ProgDeclList;
nonterminal ProgDecl;

nonterminal ConstDecl;
nonterminal ConstVarList;
nonterminal ConstVarMultiple;
nonterminal LastConstVar;
nonterminal ConstVar;

nonterminal VarDecl;
nonterminal VarDeclList;
nonterminal VarList;
nonterminal VarMultiple;
nonterminal LastVar;
nonterminal Var;

nonterminal MethodDecl;
nonterminal MethodDeclList;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodSignature;
nonterminal ReturnType;
nonterminal OptFormPars;
nonterminal FormPars;
nonterminal FormParsMultiple;
nonterminal LastFormPar;
nonterminal SingleFormPar;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal StatementList;
nonterminal Statement;
nonterminal Unmatched;
nonterminal Matched;
nonterminal IfCondition;
nonterminal ConditionClause;
nonterminal OptPrintNum;
nonterminal ForEachLoop;
nonterminal rs.etf.pp1.symboltable.concepts.Struct ArrayToIterateOver;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ImmutableIterator;
nonterminal ForeachDummyStart;
nonterminal ForeachDummyEnd;
nonterminal ThenBegin;
nonterminal ThenEnd;
nonterminal ElseBegin;
nonterminal ElseEnd;
nonterminal WhileConditonStart;
nonterminal WhileDummyStart;
nonterminal WhileDummyEnd;

nonterminal DesignatorStatement;
nonterminal OptDesignatorList;
nonterminal SingleOptDesignator;
nonterminal OptActPars;
nonterminal ActPars;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondTerm;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct SFactor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ArrayName;

nonterminal Label;
nonterminal Assignop;
nonterminal Relop;
nonterminal Addop;
nonterminal Mulop;


/************************************************************/

Program ::= (Program) PROG ProgName ProgDeclList LBRACE MethodDeclList RBRACE; 

ProgName ::= (ProgName) IDENT:nameOfProgram;

ProgDeclList ::= (ProgDeclarations) ProgDecl ProgDeclList 
				|
				(NoProgDeclaration) /* epsilon */
				;
				
ProgDecl ::= (ConstantDeclaration) ConstDecl:constantDecl
			|
			(VariableDeclaration) VarDecl:variableDecl
			;

/************************************************************/

ConstDecl ::= (ConstDecl) CONST Type:constType ConstVarList;

ConstVarList ::= (MultipleConstantVariables) ConstVarMultiple ConstVarList
				|
				(SingleConstantVariable) LastConstVar
				;

ConstVarMultiple ::= (ConstVarMultipleOK) ConstVar COMMA
					|
					(ConstVarMultipleError) error COMMA:l
					{: parser.report_error("Desila se greska u parsiranju ConstVarMultiple globalnih promenljivih. Izvrsen oporavak do ',' u liniji " + lleft, null);  :}
					;
				
LastConstVar ::= (ConstVarOK) ConstVar SEMI
				|
				(ConstVarError) error SEMI:l
				{: parser.report_error("Desila se greska u parsiranju LastConstVar globalne promenljive. Oporavak izvrsen do ';' u liniji " + lleft, null);  :}
				;
				
ConstVar ::= (ConstantNumber) IDENT:constName EQUAL NUMCONST:constNum
			|
			(ConstantCharacter) IDENT:constName EQUAL CHARCONST:constChar
			|
			(ConstantBoolean) IDENT:constName EQUAL BOOLCONST:constBool
			;

/************************************************************/

VarDeclList ::= (VarDeclarations) VarDecl VarDeclList 
				|
				(NoVarDeclaration) /* epsilon */
				;

VarDecl ::= (VarDecl) Type:varType VarList;

VarList ::= (MultipleVariables) VarMultiple VarList
			|
			(OneVariable) LastVar
			;
			
VarMultiple	::= (VarMultipleOK) Var COMMA
				|
				(VarMultipleError) error COMMA:l
				{: parser.report_error("Desila se greska u parsiranju VarMultiple globalnih promenljivih. Oporavak izvrsen do ',' u liniji " + lleft, null);  :}
				;
			
LastVar ::= (VarOK) Var SEMI
			|
			(VarError) error SEMI:l
			{: parser.report_error("Desila se greska u parsiranju LastVar globalne promenljive. Oporavak izvrsen do ';' u liniji " + lleft, null);  :}
			;
			
Var ::= (SimpleVariable) IDENT:varName
		|
		(ArrayVariable) IDENT:varName LBRACK RBRACK
		;

/************************************************************/

MethodDeclList ::= (MethodDeclarations) MethodDecl MethodDeclList 
				|
				(NoMethodDeclaration) /* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodSignature LPAREN OptFormPars VarDeclList LBRACE StatementList RBRACE;

MethodSignature ::= (MethodSignature) ReturnType IDENT:methodName;

ReturnType ::= (TypeMethod) Type:retType
			|
			(VoidMethod) VOID
			;

OptFormPars ::= (IncludeFormPars) FormPars
				|
				(NoFormPars) RPAREN
				;

FormPars ::= (MultipleFormPars) FormParsMultiple FormPars
			|
			(OneFormPar) LastFormPar
			;

FormParsMultiple ::= (FormParsMultipleOK) SingleFormPar COMMA
					|
					(FormParsMultipleError) error COMMA:l
					{: parser.report_error("Desila se greska u parsiranju FormParsMultiple parametara funkcije. Oporavak izvrsen do ',' u liniji " + lleft, null);  :}
					;

LastFormPar ::= (LastFormParOK) SingleFormPar RPAREN
				|
				(LastFormParError) error RPAREN:l
				{: parser.report_error("Desila se greska u parsiranju LastFormPar parametra funkcije. Oporavak izvrsen do ')' u liniji " + lleft, null);  :}
				;

			

SingleFormPar ::= (ArrayParameter) Type:typeName IDENT:parName LBRACK RBRACK
				|
				(SimpleParameter) Type:typeName IDENT:parName
				;

/************************************************************/

Type ::= (Type) IDENT:typeName;

/************************************************************/

StatementList ::= (MultipleStatements) Statement StatementList 
				|
				(NoStatement) /* epsilon */
				;

Statement ::= (MatchedStatement) Matched
			|
			(UnmatchedStatement) Unmatched
			;

IfCondition ::= (IfCondition) IF LPAREN ConditionClause;

ConditionClause ::= (ConditionValid) Condition RPAREN
				|
				(ConditionError) error RPAREN:l
				{: parser.report_error("Desila se greska u parsiranju ConditionError. Oporavak izvrsen do ')' u liniji " + lleft, null);  :}
				;

Unmatched ::= (UnmatchedIfStmt) IfCondition ThenBegin Statement ThenEnd
			|
			(UnmatchedIfElseStmt) IfCondition ThenBegin Matched ElseBegin ThenEnd ELSE Unmatched ElseEnd
			|
			(UnmatchedWhileStmt) WHILE WhileConditonStart LPAREN Condition RPAREN WhileDummyStart Unmatched WhileDummyEnd
			;

Matched ::= (DesignatorStmt) DesignatorStatement
			|
			(MatchedIfElseStmt) IfCondition ThenBegin Matched ElseBegin ThenEnd ELSE Matched ElseEnd
			|
			(MatchedWhileStmt) WHILE WhileConditonStart LPAREN Condition RPAREN WhileDummyStart Matched WhileDummyEnd
			|
			(BreakStmt) BREAK SEMI
			|
			(ContinueStmt) CONTINUE SEMI
			|
			(ReturnStmt) RETURN SEMI
			|
			(ReturnExprStmt) RETURN Expr:e SEMI
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			|
			(PrintExprStmt) PRINT LPAREN Expr OptPrintNum RPAREN SEMI
			|
			(ForEachStmt) ForEachLoop ARROW ForeachDummyStart Statement ForeachDummyEnd RPAREN SEMI
			|
			(ListOfStmts) LBRACE StatementList RBRACE
			;

ThenBegin ::= (ThenBegin) /* epsilon */;

ThenEnd ::= (ThenEnd) /* epsilon */;

ElseBegin ::= (ElseBegin) /* epsilon */;

ElseEnd ::= (ElseEnd) /* epsilon */;

ForEachLoop ::= (ForEachLoop) ArrayToIterateOver DOT FOREACH LPAREN ImmutableIterator;			

ArrayToIterateOver ::= (ArrayToIterateOver) Designator;

ImmutableIterator ::= (ImmutableIterator) IDENT:varName;

OptPrintNum ::= (PrintNum) COMMA NUMCONST:printNum
			|
			(NoPrintNum) /* epsilon */
			;
			
WhileConditonStart ::= (WhileConditonStart) /* epsilon */;

WhileDummyStart ::= (WhileDummyStart) /* epsilon */;

WhileDummyEnd ::= (WhileDummyEnd) /* epsilon */;

ForeachDummyStart ::= (ForeachDummyStart) /* epsilon */;

ForeachDummyEnd ::= (ForeachDummyEnd) /* epsilon */;

/************************************************************/

DesignatorStatement ::= (DesignatorAssignStmtOK) Designator:dst Assignop Expr:e SEMI
						|
						(DesignatorAssignStmtError) error SEMI:l
						{: parser.report_error("Desila se greska u DesignatorStatement dodeli vrednosti. Oporavak izvrsen do ';' u liniji " + lleft, null);  :}
						|
						(DesignatorFunctionStmt) Designator:func LPAREN OptActPars RPAREN SEMI
						|
						(DesignatorIncrementStmt) Designator:var INCR SEMI
						|
						(DesignatorDecrementStmt) Designator:var DECR SEMI
						|
						(DesignatorArrayAssignStmt) LBRACK OptDesignatorList RBRACK EQUAL Designator:src SEMI
						;

OptDesignatorList ::= (OneOptDesign) SingleOptDesignator
					|
					(MultipleOptDesigns) SingleOptDesignator COMMA OptDesignatorList
					;

SingleOptDesignator ::= (IncludeOptDesignator) Designator
						|
						(NoOptDesignator) /* epsilon */
						;

OptActPars ::= (IncludeActPar) ActPars
			|
			(NoActPar) /* epsilon */
			;

ActPars ::= (OneExprPar) Expr
			|
			(MultipleExprPars) Expr COMMA ActPars
			;

/************************************************************/

Condition ::= (SingleCondTerm) CondTerm
			|
			(MultipleCondTerms) Condition OR CondTerm
			;

CondTerm ::= (SingleCondFact) CondFact
			|
			(MultipleCondFacts) CondTerm AND CondFact
			;

CondFact ::= (OneCondExpr) Expr:fact
			|
			(TwoCondExprs) Expr:leftFact Relop Expr:rightFact
			;

/************************************************************/

Expr ::= (SingleTermExpr) Term
		|
		(MultipleTermExprs) Expr Addop Term
		;

Term ::= (SingleFactorTerm) SFactor
		|
		(MultipleFactorTerms) Term Mulop SFactor
		;

SFactor ::= (PositiveFactor) Factor
			|
			(NegativeFactor) MINUS Factor
			;

Factor ::= (FactorNumber) NUMCONST:numFact
			|
			(FactorCharacter) CHARCONST:charFact
			|
			(FactorBoolean) BOOLCONST:boolFact
			|
			(FactorNewArray) NEW Type:arrayType LBRACK Expr:index RBRACK
			|
			(FactorExpresion) LPAREN Expr:e RPAREN
			|
			(FactorDesignator) Designator:var
			|
			(FactorFunction) Designator:func LPAREN OptActPars RPAREN
			;

/************************************************************/

Designator ::= (BasicDesignator) IDENT:varName
				|
				(ArrayDesignatorIndex) ArrayName LBRACK Expr:idx RBRACK
				;
				
ArrayName ::= (ArrayName) IDENT:arrName;

Label ::= (Label) IDENT:labelName;

/************************************************************/

Assignop ::= (Assignop) EQUAL;

Relop ::= (IsEqual) ISEQ
		|
		(IsNotEqual) ISNEQ
		|
		(IsGreater) GRT
		|
		(IsGreaterEqual) GRTE
		|
		(IsLess) LSS
		|
		(IsLessEqual) LSSE
		;


Addop ::= (Addition) PLUS
		|
		(Subtraction) MINUS
		;

Mulop ::= (Multiplication) MUL
		|
		(Division) DIV
		|
		(Modulo) MOD
		;
