// Semantic error test - all possible semantic errors

program errortest

const int ci = 10;
const int i1 = 1;
const int i1 = 2;
int i1;
int i1[];

int niz[];

const bool b1 = 1;
const bool b2 = 'a';
bool b3;
bool b4[];

char c1, c2, c3;
char cniz[];

int a, b;

float real1;
double real2;

niz array1[];

{
	void dummy() {}
	
	int dummy1(int a, int b) {return 0;}
	
	void func1() { return 0; }
	
	int func2() { return true; }
	
	int func3() { return; }
	
	bool main()
		char c; char c;
	{
	
		x = 10;
		i1 = sum_func(i1, i2);
		
		chr(a); chr(i1); chr(b3); chr(c1); chr(niz); chr(niz[0]); chr(dummy);
		ord(a); ord(i1); ord(b3); ord(c1); ord(niz); ord(cniz[0]); ord(dummy);
		len(a); len(i1); len(b3); len(cniz); len(niz); len(niz[0]); len(dummy);
		
		
		b3 = false;
		b3 = 'a'; b3 = 1; b3 = niz; b3 = cniz[0];
		c1 = niz;
		ci = 20;
		dummy  = i1;
		
		c1++; niz++; niz[0]++; a++; cniz++; cniz[0]++; b3++; dummy++;
		c1--; niz--; niz[0]--; a--; cniz--; cniz[0]--; b3--; dummy--;
		
		dummy(dummy);
		dummy(1, 2, 3);
		dummy1(1, 2);
		dummy(c1, b3);
		dummy1(dummy1(1, 1), dummy1(1, 1));
		dummy1(dummy(), dummy());
		a();
		niz();
		
		[] = niz;
		[] = niz[0];
		[] = a;
		[,,] = niz;
		[a,b] = niz;
		[dummy, cniz, ] = niz;
		[c1, c2] = niz;
		[b3] = niz;
		
		while(true) { break; }
		niz.foreach(a => { break; });
		if (true) { break; }
		break;
		while(true) { continue; }
		niz.foreach(a => { continue; });
		if (true) { continue; }
		continue;
		
		read(a); read(niz); read(b3); read(c1); read(niz[0]); read(dummy); read(int);
		print(a); print(niz); print(b3); print(c1); print(niz[0]); print(dummy); print(int);
		
		if (a) {}
		if (c1) {}
		if (true) {}
		if (niz) {}
		if (a+a+a+a+a+a+a+a+a>0) {}
		if (a>b3) {}
		if (niz > cniz) {}
		if (niz > niz) {}
		if (niz == niz || niz != niz) {}
		if (true != 1) {}
		
		while (a) {}
		while (c1) {}
		while (true) {}
		while (niz) {}
		while (a+a+a+a+a+a+a+a+a>0) {}
		while (a>b3) {}
		
		niz.foreach(a => {});
		cniz.foreach(c1 => {});
		niz[0].foreach(a => {});
		a.foreach(a => {});
		b3.foreach(a => {});
		dummy.foreach(a => {});
		niz.foreach(c1 => {});
		niz.foreach(b3 => {});
		niz.foreach(dummy => {});
		niz.foreach(niz => {});
		
		niz.foreach(a => {
			read(a);
			a = 10;
			a++;
			a--;
			[a] = niz;
		});
		
		a = -1;
		a = -c1;
		a = -true;
		a = -niz;
		a = -niz[0];
		a = -dummy;
		a = -dummy1;
		a = -dummy1(1,1);
		
		a = a+a;
		a = c1+c2;
		a = dummy()+a;
		
		a = a*a;
		a = c1*c2;
		a = dummy()*a;
		
		a = dummy1(1,1);
		a = c1();
		a = niz();
		a = niz[0]();
		
		niz = new int[10];
		niz = new int[a];
		niz = new char[10];
		niz = new int['a'];
		niz = new int[dummy];
		niz = new int[dummy1];
		niz = new int[5+1];
		niz = new int[niz[0]];
		niz = new int[dummy1(4,5)];
		
		niz[0] = a;
		a[0] = a;
		niz['a'] = a;
		niz[niz[niz[0]]] = a;
	
	}
}

